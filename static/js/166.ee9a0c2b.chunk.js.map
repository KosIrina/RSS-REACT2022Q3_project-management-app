{"version":3,"file":"static/js/166.ee9a0c2b.chunk.js","mappings":"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","sources":["api/boards.ts","webpack://my-app/./src/components/common/customSnackbar/CustomSnackbar.module.scss?9fef","components/common/customSnackbar/CustomSnackbar.tsx","webpack://my-app/./src/components/common/fullScreenLoader/FullScreenLoader.module.scss?0494","components/common/fullScreenLoader/FullScreenLoader.tsx","webpack://my-app/./src/components/boardManagementPage/taskList/task/Task.module.scss?8f00","components/boardManagementPage/taskList/task/Task.tsx","components/boardManagementPage/taskList/task/TaskContainer.tsx","webpack://my-app/./src/components/boardManagementPage/taskList/TaskList.module.scss?9d84","components/boardManagementPage/taskList/TaskList.tsx","webpack://my-app/./src/components/boardManagementPage/boardColumn/header/editTitle/EditTitleForm.module.scss?f892","components/boardManagementPage/boardColumn/header/editTitle/EditTitleForm.tsx","webpack://my-app/./src/components/boardManagementPage/boardColumn/header/deleteColumn/DeleteColumn.module.scss?6026","components/boardManagementPage/boardColumn/header/deleteColumn/DeleteColumn.tsx","webpack://my-app/./src/components/boardManagementPage/boardColumn/header/ColumnHeader.module.scss?ea2f","components/boardManagementPage/boardColumn/header/ColumnHeader.tsx","webpack://my-app/./src/components/boardManagementPage/boardColumn/BoardColumn.module.scss?6d60","components/boardManagementPage/boardColumn/BoardColumn.tsx","api/column.ts","constants/index.ts","webpack://my-app/./src/components/boardManagementPage/board/Board.module.scss?d829","components/boardManagementPage/board/Board.tsx","api/task.ts","webpack://my-app/./src/components/boardManagementPage/addColumnForm/AddColumn.module.scss?9245","components/boardManagementPage/addColumnForm/AddColumn.tsx","webpack://my-app/./src/pages/BoardManagementPage.module.scss?3deb","pages/BoardManagementPage.tsx"],"sourcesContent":["import { API_BASE_URL } from './constants';\nimport { IResponseError, IBoard, TBoards } from './types';\n\nexport async function createBoardCall(\n  token: string,\n  owner: string,\n  title: string\n): Promise<IBoard> {\n  const response = await fetch(`${API_BASE_URL}/boards`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ title, owner, users: [] }),\n  });\n\n  const data: IBoard | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IBoard;\n}\n\nexport async function getAllBoardsCall(token: string): Promise<TBoards> {\n  const response = await fetch(`${API_BASE_URL}/boards`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: TBoards | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as TBoards;\n}\n\nexport async function getBoardCall(token: string, boardId: string): Promise<IBoard> {\n  const response = await fetch(`${API_BASE_URL}/boards/${boardId}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: IBoard | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IBoard;\n}\n\nexport async function deleteBoardCall(token: string, boardId: string): Promise<IBoard> {\n  const response = await fetch(`${API_BASE_URL}/boards/${boardId}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: IBoard | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IBoard;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"snackbar\":\"CustomSnackbar_snackbar__HogOa\",\"alert\":\"CustomSnackbar_alert__2Qolh\"};","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport { ISnackBarProps } from './types';\nimport styles from './CustomSnackbar.module.scss';\n\nfunction CustomSnackBar({ isOpen, onClose, type, message }: ISnackBarProps) {\n  const toggleSnackBar = (event?: React.SyntheticEvent | Event, reason?: string): void => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    onClose();\n  };\n  return (\n    <Snackbar\n      className={styles.snackbar}\n      open={isOpen}\n      autoHideDuration={2000}\n      onClose={toggleSnackBar}\n    >\n      <Alert\n        elevation={6}\n        variant=\"filled\"\n        className={styles.alert}\n        onClose={toggleSnackBar}\n        severity={type}\n      >\n        {message}\n      </Alert>\n    </Snackbar>\n  );\n}\n\nexport default CustomSnackBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"FullScreenLoader_wrapper__ijAZ7\"};","import React from 'react';\nimport Loader from '../loader';\nimport styles from './FullScreenLoader.module.scss';\n\nfunction FullScreenLoader() {\n  return (\n    <div className={styles.wrapper}>\n      <Loader />\n    </div>\n  );\n}\n\nexport default FullScreenLoader;\n","// extracted by mini-css-extract-plugin\nexport default {\"task\":\"Task_task__an1j9\"};","import React from 'react';\nimport Box from '@mui/material/Box';\nimport yellow from '@mui/material/colors/yellow';\nimport styles from './Task.module.scss';\n\ninterface ITaskProps {\n  title: string;\n  isDragging?: boolean;\n}\n\nfunction Task({ title, isDragging = false }: ITaskProps) {\n  return (\n    <Box\n      className={styles.task}\n      p={1}\n      m={1}\n      sx={{\n        bgcolor: isDragging ? yellow[100] : yellow[50],\n        cursor: isDragging ? 'grabbing' : 'grab',\n      }}\n    >\n      {title}\n    </Box>\n  );\n}\n\nexport default Task;\n","import React from 'react';\nimport Task from './Task';\nimport { CSS } from '@dnd-kit/utilities';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { TTask } from 'models/types';\n\ninterface TTaskContainerProps extends TTask {\n  columnId: string;\n}\n\nfunction TaskContainer({ _id: id, title, columnId }: TTaskContainerProps) {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({\n    id,\n    data: {\n      type: 'task',\n      columnId,\n    },\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  return (\n    <li style={style} ref={setNodeRef} {...attributes} {...listeners}>\n      <Task title={title} isDragging={isDragging} />\n    </li>\n  );\n}\n\nexport default TaskContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"scrollable\":\"TaskList_scrollable__dITHw\"};","import React from 'react';\nimport Box from '@mui/material/Box';\nimport { SortableContext } from '@dnd-kit/sortable';\nimport { useDroppable } from '@dnd-kit/core';\nimport { TaskContainer } from './task';\nimport { TTask } from 'models/types';\n\nimport styles from './TaskList.module.scss';\n\ntype TTaskListProps = {\n  items: TTask[];\n  columnId: string;\n};\n\nfunction TaskList({ columnId, items }: TTaskListProps) {\n  const { setNodeRef } = useDroppable({\n    id: `${columnId}drop`,\n    data: {\n      accepts: ['task'],\n      columnId: columnId,\n    },\n  });\n\n  return (\n    <SortableContext items={items.map((task) => task._id)}>\n      <Box ref={setNodeRef} className={styles.scrollable}>\n        <ul>\n          {items.map((item) => (\n            <TaskContainer key={item._id} {...item} columnId={columnId} />\n          ))}\n        </ul>\n      </Box>\n    </SortableContext>\n  );\n}\n\nexport default TaskList;\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"EditTitleForm_input__ncs+c\",\"error\":\"EditTitleForm_error__2Updx\",\"tooltip\":\"EditTitleForm_tooltip__TnR3W\",\"arrow\":\"EditTitleForm_arrow__JthhG\",\"editForm\":\"EditTitleForm_editForm__SLrjg\",\"cancel\":\"EditTitleForm_cancel__Nnwpu\",\"save\":\"EditTitleForm_save__c+cf1\",\"iconSave\":\"EditTitleForm_iconSave__x-UO5\",\"iconCancel\":\"EditTitleForm_iconCancel__axjZs\"};","import React from 'react';\nimport Input from '@mui/material/Input';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\nimport CheckOutlinedIcon from '@mui/icons-material/CheckOutlined';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport styles from './EditTitleForm.module.scss';\n\ntype TEditTitleForm = {\n  columnNameRef: React.MutableRefObject<string>;\n  close: () => void;\n  updateColumnTitle: (title: string) => void;\n};\n\nfunction EditTitleForm({ close, columnNameRef, updateColumnTitle }: TEditTitleForm) {\n  const { t } = useTranslation('board-management-page');\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      columnName: columnNameRef.current,\n    },\n  });\n\n  const changeName: SubmitHandler<{ columnName: string }> = (data) => {\n    updateColumnTitle(data.columnName);\n\n    columnNameRef.current = data.columnName;\n\n    close();\n  };\n\n  return (\n    <>\n      <form\n        name=\"editColumnTitleForm\"\n        autoComplete=\"off\"\n        className={styles.editForm}\n        onSubmit={handleSubmit(changeName)}\n      >\n        <Tooltip\n          arrow\n          open={!!errors.columnName}\n          title={errors.columnName?.message}\n          classes={{ tooltip: styles.tooltip, arrow: styles.arrow }}\n        >\n          <Input\n            className={!!errors.columnName ? styles.error : styles.input}\n            autoFocus={true}\n            fullWidth\n            disableUnderline\n            {...register('columnName', {\n              required: t('emptyName') || '',\n              minLength: {\n                value: 2,\n                message: t('minSymbols') || '',\n              },\n              maxLength: {\n                value: 50,\n                message: t('maxSymbols'),\n              },\n            })}\n          />\n        </Tooltip>\n        <IconButton aria-label=\"save\" className={styles.save} onClick={handleSubmit(changeName)}>\n          <CheckOutlinedIcon className={styles.iconSave} />\n        </IconButton>\n        <IconButton aria-label=\"cancel\" className={styles.cancel} onClick={close}>\n          <CloseOutlinedIcon className={styles.iconCancel} />\n        </IconButton>\n      </form>\n    </>\n  );\n}\n\nexport default EditTitleForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"deleteBtn\":\"DeleteColumn_deleteBtn__WcDWX\",\"dialogContent\":\"DeleteColumn_dialogContent__xBVaX\"};","import React, { useState, lazy, Suspense } from 'react';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport Loader from 'components/common/loader';\nimport { useTranslation } from 'react-i18next';\nimport styles from './DeleteColumn.module.scss';\n\nconst ConfirmationPopup = lazy(() => import('components/common/confirmationPopup'));\n\ntype TDeleteColumnProps = {\n  columnName: string;\n  deleteColumn: () => void;\n};\n\nfunction DeleteColumn({ columnName, deleteColumn }: TDeleteColumnProps) {\n  const [openConfirmationForm, setOpenConfirmationForm] = useState(false);\n  const { t } = useTranslation('board-management-page');\n\n  const handleBtnClick = () => {\n    setOpenConfirmationForm(true);\n  };\n\n  const handleClose = () => {\n    setOpenConfirmationForm(false);\n  };\n\n  const handleDelete = () => {\n    deleteColumn();\n    setOpenConfirmationForm(false);\n  };\n\n  return (\n    <>\n      <Tooltip title={t('deleteLabel')} arrow>\n        <>\n          <IconButton className={styles.deleteBtn} onClick={handleBtnClick}>\n            <DeleteOutlineOutlinedIcon fontSize=\"small\" />\n          </IconButton>\n        </>\n      </Tooltip>\n\n      <Dialog open={openConfirmationForm} onClose={handleClose} maxWidth=\"xs\" fullWidth>\n        <DialogContent className={styles.dialogContent}>\n          <Suspense fallback={<Loader />}>\n            <ConfirmationPopup\n              itemToDelete={t('deleteInfo', { columnName })}\n              onClose={handleClose}\n              onDelete={handleDelete}\n            />\n          </Suspense>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nexport default DeleteColumn;\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"ColumnHeader_header__fU5fq\",\"title\":\"ColumnHeader_title__3YrVe\"};","import React, { useRef, useState } from 'react';\nimport Box from '@mui/material/Box';\nimport EditTitleForm from './editTitle';\nimport DeleteColumn from './deleteColumn';\nimport styles from './ColumnHeader.module.scss';\n\ntype TColumnHeaderProps = {\n  label: string;\n  deleteColumn: () => void;\n  updateColumnTitle: (title: string) => void;\n};\n\nfunction ColumnHeader({ label, deleteColumn, updateColumnTitle }: TColumnHeaderProps) {\n  const [openEditForm, setOpenEditForm] = useState(false);\n  const columnNameRef = useRef(label);\n\n  const handleEdit = () => {\n    setOpenEditForm(true);\n  };\n\n  const handleClose = () => {\n    setOpenEditForm(false);\n  };\n\n  return (\n    <Box className={styles.header}>\n      {openEditForm ? (\n        <EditTitleForm\n          close={handleClose}\n          columnNameRef={columnNameRef}\n          updateColumnTitle={updateColumnTitle}\n        />\n      ) : (\n        <h3 className={styles.title} onClick={handleEdit}>\n          {columnNameRef.current}\n        </h3>\n      )}\n\n      {!openEditForm && <DeleteColumn columnName={label} deleteColumn={deleteColumn} />}\n    </Box>\n  );\n}\n\nexport default ColumnHeader;\n","// extracted by mini-css-extract-plugin\nexport default {\"column\":\"BoardColumn_column__xdpfT\",\"addButton\":\"BoardColumn_addButton__iXj8G\"};","import React from 'react';\nimport { CSS } from '@dnd-kit/utilities';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { useTranslation } from 'react-i18next';\nimport { TaskList } from '../taskList';\nimport { TColumn } from 'models/types';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport ColumnHeader from './header/ColumnHeader';\nimport grey from '@mui/material/colors/grey';\nimport styles from './BoardColumn.module.scss';\n\ntype TBoardColumnProps = TColumn & {\n  deleteColumn: (columnId: string) => void;\n  updateColumnTitle: (columnId: string, title: string, order: number) => void;\n};\n\nfunction BoardColumn({\n  _id: id,\n  title,\n  order,\n  items,\n  updateColumnTitle,\n  deleteColumn,\n}: TBoardColumnProps) {\n  const { t } = useTranslation('board-management-page');\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({\n    id,\n    data: {\n      type: 'column',\n      columnId: 'root',\n    },\n  });\n\n  const handleDeleteColumn = () => {\n    deleteColumn(id);\n  };\n\n  const handleUpdateTitle = (title: string) => {\n    updateColumnTitle(id, title, order);\n  };\n\n  return (\n    <Grid item xs={4}>\n      <Paper\n        elevation={3}\n        ref={setNodeRef}\n        className={styles.column}\n        sx={{\n          transform: CSS.Transform.toString(transform),\n          transition,\n          cursor: isDragging ? 'grabbing' : 'grab',\n          backgroundColor: isDragging ? grey[300] : grey[200],\n        }}\n        {...listeners}\n        {...attributes}\n      >\n        <ColumnHeader\n          label={title}\n          deleteColumn={handleDeleteColumn}\n          updateColumnTitle={handleUpdateTitle}\n        />\n        order = {order}\n        {!!items?.length && <TaskList items={items} columnId={id} />}\n        <Box p={1}>\n          <Button size=\"small\" color=\"secondary\" variant=\"contained\">\n            + {t('addTask')}\n          </Button>\n        </Box>\n      </Paper>\n    </Grid>\n  );\n}\n\nexport default BoardColumn;\n","import { TColumn } from 'models/types';\nimport { API_BASE_URL } from './constants';\n\ntype TResponseError = {\n  statusCode: number;\n  message: string;\n};\n\nexport const ColumnAPI = {\n  create: async (\n    token: string,\n    boardId: string,\n    title: string,\n    order: number\n  ): Promise<TColumn> => {\n    const response = await fetch(`${API_BASE_URL}/boards/${boardId}/columns`, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ title, order }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) throw new Error(data.message);\n\n    return data;\n  },\n\n  update: async (\n    token: string,\n    boardId: string,\n    columnId: string,\n    title: string,\n    order: number\n  ): Promise<TColumn | null> => {\n    const response = await fetch(`${API_BASE_URL}/boards/${boardId}/columns/${columnId}`, {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ title, order }),\n    });\n\n    if (!response.ok) return null;\n\n    return await response.json();\n  },\n\n  delete: async (token: string, boardId: string, columnId: string): Promise<TColumn> => {\n    const response = await fetch(`${API_BASE_URL}/boards/${boardId}/columns/${columnId}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) throw new Error(data.message);\n\n    return data;\n  },\n\n  getAll: async (token: string, boardId: string): Promise<TColumn[] | null> => {\n    const response = await fetch(`${API_BASE_URL}/boards/${boardId}/columns`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      return null;\n    }\n\n    return await response.json();\n  },\n};\n","// constants\n\nconst SENSOR_OPTIONS = {\n  distance: 3,\n};\n\nconst TOOLTIP_DELAY = 10000;\n\nexport { SENSOR_OPTIONS, TOOLTIP_DELAY };\n","// extracted by mini-css-extract-plugin\nexport default {\"fixed\":\"Board_fixed__q+lcb\",\"scrollable\":\"Board_scrollable__+oEp+\",\"columns\":\"Board_columns__P7YEQ\"};","import React, { useState } from 'react';\nimport useAuth from 'auth/useAuth';\nimport BoardColumn from '../boardColumn';\nimport FullScreenLoader from 'components/common/fullScreenLoader';\nimport {\n  DndContext,\n  closestCorners,\n  DragEndEvent,\n  DragOverEvent,\n  UniqueIdentifier,\n  useSensor,\n  useSensors,\n  PointerSensor,\n  KeyboardSensor,\n  DragOverlay,\n  DragStartEvent,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  horizontalListSortingStrategy,\n  arrayMove,\n  sortableKeyboardCoordinates,\n} from '@dnd-kit/sortable';\nimport { ColumnAPI } from 'api/column';\nimport { Task } from '../taskList';\nimport { TColumn, TTask } from 'models/types';\nimport { SENSOR_OPTIONS } from 'constants/index';\nimport { TSnackBarState } from 'components/common/customSnackbar/types';\nimport styles from './Board.module.scss';\n\nconst getColumnIndex = (id: UniqueIdentifier, columns: TColumn[]) => {\n  return columns.findIndex((column) => column._id === id);\n};\n\nconst getTaskIndex = (id: UniqueIdentifier, column: TColumn) => {\n  return column?.items?.findIndex((task) => task._id === id);\n};\n\ntype TBoardProps = {\n  boardId: string;\n  columns: TColumn[];\n  setSnackBar: React.Dispatch<React.SetStateAction<TSnackBarState>>;\n  setColumns: React.Dispatch<React.SetStateAction<TColumn[]>>;\n};\n\nfunction Board({ boardId, columns, setColumns, setSnackBar }: TBoardProps) {\n  const [showLoader, setShowLoader] = useState(false);\n  const [activeItem, setActiveItem] = useState<TTask | null>(null);\n  const { user } = useAuth();\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: SENSOR_OPTIONS,\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n      keyboardCodes: { start: ['KeyS'], end: [], cancel: [] },\n    })\n  );\n\n  const handleDragStart = (event: DragStartEvent) => {\n    const { active } = event;\n\n    if (active.data.current?.type === 'task') {\n      const activeColumn = columns.find(\n        (column) => column._id === active.data.current?.columnId.toString()\n      );\n\n      if (!activeColumn) return;\n\n      const task = activeColumn?.items?.find((task) => task._id === active.id.toString());\n      task && setActiveItem({ ...task });\n    }\n  };\n\n  const handlerDragOver = (event: DragOverEvent) => {\n    const { active, over } = event;\n\n    if (!over || active.id === over.id) return;\n\n    const activeContainerID: string = active.data.current?.columnId || null;\n    const overContainerID: string = over?.data.current?.columnId || null;\n\n    if (!activeContainerID || !overContainerID || activeContainerID === overContainerID) {\n      return;\n    }\n\n    setColumns((prev) => {\n      const activeColumn = prev.find(({ _id }) => _id === activeContainerID);\n      const overColumn = prev.find(({ _id }) => _id === overContainerID);\n\n      if (!activeColumn || !overColumn) return [...prev];\n\n      const activeIndex = getTaskIndex(active.id, activeColumn);\n      const overIndex = !overColumn?.items?.length ? 0 : getTaskIndex(over?.id, overColumn);\n\n      if (!activeIndex || !overIndex) return [...prev];\n\n      prev[prev.indexOf(activeColumn)] = {\n        ...activeColumn,\n        items: [...activeColumn.items.filter((task) => task._id !== active.id.toString())],\n      };\n\n      const activeTaskItem = activeColumn.items?.[activeIndex];\n\n      if (!activeTaskItem) return [...prev];\n\n      if (overIndex === 0) {\n        prev[prev.indexOf(overColumn)] = {\n          ...overColumn,\n          items: [activeTaskItem, ...overColumn?.items],\n        };\n      } else {\n        activeTaskItem &&\n          (prev[prev.indexOf(overColumn)] = {\n            ...overColumn,\n            items: [\n              ...overColumn?.items?.slice(0, overIndex),\n              activeTaskItem,\n              ...overColumn?.items?.slice(overIndex, overColumn.items.length),\n            ],\n          });\n      }\n\n      return [...prev];\n    });\n  };\n\n  const handlerDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (!over || active.id === over.id) {\n      setActiveItem(null);\n      return;\n    }\n\n    const activeContainerID: string = active.data.current?.columnId || null;\n    const overContainerID: string = over?.data.current?.columnId || null;\n\n    if (!activeContainerID || !overContainerID) {\n      return;\n    }\n\n    if (activeContainerID === overContainerID) {\n      const currentColumn = columns.find(({ _id }) => _id === activeContainerID);\n\n      if (!currentColumn) {\n        if (active.id !== over?.id) {\n          const activeIndex: number = getColumnIndex(active.id, columns);\n          const overIndex: number = getColumnIndex(over?.id || 0, columns);\n\n          setColumns(arrayMove(columns, activeIndex, overIndex));\n        }\n        return;\n      }\n\n      const activeIndex: number = getTaskIndex(active.id, currentColumn);\n      const overIndex: number = getTaskIndex(over?.id || 0, currentColumn);\n\n      if (activeIndex != overIndex) {\n        setColumns((prev) => {\n          prev[prev.indexOf(currentColumn)] = {\n            ...currentColumn,\n            items: arrayMove<TTask>(currentColumn.items, activeIndex, overIndex),\n          };\n          return [...prev];\n        });\n      }\n      return;\n    }\n    setActiveItem(null);\n  };\n\n  const deleteColumn = (columnId: string) => {\n    setShowLoader(true);\n\n    const dataColumn = ColumnAPI.delete(user.token, boardId, columnId);\n    console.log(dataColumn);\n\n    if (!dataColumn) {\n      setShowLoader(false);\n      setSnackBar((prev) => ({\n        ...prev,\n        isOpen: true,\n        severity: 'error',\n        message: 'columnNotDeleted',\n      }));\n      return;\n    }\n\n    setColumns((prev) => {\n      const newState = prev.filter((column) => column._id !== columnId);\n      console.log(newState);\n      return [...newState];\n    });\n    setShowLoader(false);\n    setSnackBar((prev) => ({\n      ...prev,\n      isOpen: true,\n      severity: 'success',\n      message: 'columnDeleted',\n    }));\n  };\n\n  const updateColumnTitle = (columnId: string, title: string, order: number) => {\n    setShowLoader(true);\n    const columnTitle = ColumnAPI.update(user.token, boardId, columnId, title, order);\n    setShowLoader(false);\n\n    if (!columnTitle) {\n      setSnackBar({\n        isOpen: true,\n        type: 'error',\n        message: 'titleNotUpdated',\n      });\n      return;\n    }\n\n    setSnackBar({\n      isOpen: true,\n      type: 'success',\n      message: 'titleUpdated',\n    });\n  };\n\n  return (\n    <>\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCorners}\n        onDragStart={handleDragStart}\n        onDragOver={handlerDragOver}\n        onDragEnd={handlerDragEnd}\n      >\n        <SortableContext\n          items={columns.map((column) => column?._id)}\n          strategy={horizontalListSortingStrategy}\n        >\n          <div className={styles.fixed}>\n            <div className={styles.scrollable}>\n              <div className={styles.columns}>\n                {columns.map(\n                  (column) =>\n                    column._id && (\n                      <BoardColumn\n                        key={column._id}\n                        deleteColumn={deleteColumn}\n                        updateColumnTitle={updateColumnTitle}\n                        {...column}\n                      />\n                    )\n                )}\n              </div>\n            </div>\n          </div>\n        </SortableContext>\n\n        {activeItem && (\n          <DragOverlay>\n            <Task {...activeItem} />\n          </DragOverlay>\n        )}\n      </DndContext>\n\n      {showLoader && <FullScreenLoader />}\n    </>\n  );\n}\n\nexport default Board;\n","import { TTask } from 'models/types';\nimport { API_BASE_URL } from './constants';\n\nexport const TaskAPI = {\n  getAll: async (token: string, boardId: string, columnId: string) => {\n    const response = await fetch(`${API_BASE_URL}/boards/${boardId}/columns/${columnId}/tasks`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: TTask[] = await response.json();\n\n    return data;\n  },\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"addButton\":\"AddColumn_addButton__-47px\",\"title\":\"AddColumn_title__g-zQx\",\"dialogContent\":\"AddColumn_dialogContent__2NYO+\"};","import React, { Suspense, lazy } from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport { useTranslation } from 'react-i18next';\nimport { TAddColumnFormValues } from './AddColumn.types';\nimport Loader from 'components/common/loader';\nimport styles from './AddColumn.module.scss';\n\nconst AddColumnForm = lazy(() => import('./AddColumnForm'));\n\ntype TAddColumnProps = {\n  onSubmit: (data: TAddColumnFormValues) => void;\n};\n\nfunction AddColumn({ onSubmit }: TAddColumnProps) {\n  const { t } = useTranslation('board-management-page');\n  const [open, setOpen] = React.useState(false);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handlerClick = () => {\n    setOpen(true);\n  };\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        onClick={handlerClick}\n        size={'small'}\n        className={styles.addButton}\n      >\n        + {t('addColumn')}\n      </Button>\n      <Dialog open={open} onClose={handleClose} maxWidth=\"xs\" fullWidth>\n        <h3 className={styles.title}>{t('formTitle')}</h3>\n        <DialogContent className={styles.dialogContent}>\n          <Suspense fallback={<Loader />}>\n            <AddColumnForm onClose={handleClose} onSubmit={onSubmit} />\n          </Suspense>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nexport default AddColumn;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"BoardManagementPage_wrapper__JdzmW\",\"header\":\"BoardManagementPage_header__zmepn\",\"title\":\"BoardManagementPage_title__kUcBw\",\"buttons\":\"BoardManagementPage_buttons__dC0Va\",\"redirectButton\":\"BoardManagementPage_redirectButton__zlY2z\",\"addButton\":\"BoardManagementPage_addButton__IbDEv\"};","import React, { useCallback, useEffect, useState } from 'react';\nimport useAuth from 'auth/useAuth';\nimport Board from 'components/boardManagementPage';\nimport CustomSnackBar from 'components/common/customSnackbar';\nimport FullScreenLoader from 'components/common/fullScreenLoader';\nimport Loader from 'components/common/loader';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport { useTranslation } from 'react-i18next';\nimport { SubmitHandler } from 'react-hook-form';\nimport { TaskAPI } from 'api/task';\nimport { ColumnAPI } from 'api/column';\nimport { TColumn, TTask } from 'models/types';\nimport { AddColumn } from 'components/boardManagementPage/addColumnForm';\nimport { TAddColumnFormValues } from 'components/boardManagementPage/addColumnForm';\nimport { TSnackBarState } from 'components/common/customSnackbar/types';\nimport { getBoardCall } from 'api/boards';\nimport { useParams, Link } from 'react-router-dom';\nimport styles from './BoardManagementPage.module.scss';\n\nconst sortByOrder = (items: TColumn[]) => {\n  return items.sort((a, b) => a.order - b.order);\n};\n\nfunction BoardManagementPage() {\n  const { t } = useTranslation('board-management-page');\n  const { boardId } = useParams();\n  const { user } = useAuth();\n  const [columns, setColumns] = useState<TColumn[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [snackBar, setSnackBar] = useState<TSnackBarState>({\n    isOpen: false,\n    type: 'success',\n    message: '',\n  });\n  const [boardTitle, setBoardTitle] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getBoard = useCallback(async (): Promise<void> => {\n    setIsLoading(true);\n    try {\n      const { title } = await getBoardCall(user.token, boardId || '');\n      setBoardTitle(title);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [boardId, user.token]);\n\n  useEffect(() => {\n    getBoard();\n  }, [getBoard]);\n\n  const addTasks = useCallback(\n    (dataColumns: TColumn[]) => {\n      if (!dataColumns.length || !boardId) return;\n\n      const promises: Promise<TTask[]>[] = dataColumns.map((column) =>\n        TaskAPI.getAll(user.token, boardId, column._id)\n      );\n\n      Promise.all(promises).then((taskData) => {\n        if (!taskData) return;\n\n        const newColumns = [...dataColumns];\n\n        taskData.forEach((task, idx) => {\n          newColumns[idx] = { ...newColumns[idx], items: task };\n        });\n\n        setColumns([...newColumns]);\n      });\n    },\n    [boardId, user.token]\n  );\n\n  useEffect(() => {\n    if (!boardId) return;\n\n    ColumnAPI.getAll(user.token, boardId).then((dataColumns) => {\n      setLoading(false);\n\n      if (!dataColumns) return;\n\n      dataColumns.length && addTasks(sortByOrder(dataColumns));\n    });\n  }, [addTasks, boardId, user.token]);\n\n  const handlerSubmit: SubmitHandler<TAddColumnFormValues> = async (data) => {\n    if (!boardId) return;\n\n    setLoading(true);\n    const index = columns.length ? columns[columns.length - 1].order + 1 : 0;\n    const newColumn = await ColumnAPI.create(user.token, boardId, data.columnName, index);\n    setLoading(false);\n\n    if (!newColumn) {\n      setSnackBar((prev) => ({\n        ...prev,\n        isOpen: true,\n        type: 'error',\n        message: 'columnNotAdd',\n      }));\n      return;\n    }\n\n    setColumns((prev) => [...prev, newColumn]);\n\n    setSnackBar((prev) => ({\n      ...prev,\n      isOpen: true,\n      type: 'success',\n      message: 'columnAdd',\n    }));\n  };\n\n  const handleCloseSnackBar = () => {\n    setSnackBar((prev) => ({ ...prev, isOpen: false }));\n  };\n\n  return (\n    <div className={`container ${styles.wrapper}`}>\n      <div className={styles.header}>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            <h2 className={styles.title}>{`${t('title')} \"${boardTitle || ''}\"`}</h2>\n            <Box className={styles.buttons} mb={2}>\n              <AddColumn onSubmit={handlerSubmit} />\n              <Button\n                className={styles.redirectButton}\n                variant=\"outlined\"\n                component={Link}\n                to=\"/boards-list\"\n              >\n                {t('backButton')}\n              </Button>\n            </Box>\n          </>\n        )}\n      </div>\n      {!!columns.length && boardId && (\n        <Board\n          boardId={boardId}\n          columns={columns}\n          setColumns={setColumns}\n          setSnackBar={setSnackBar}\n        />\n      )}\n      {loading && <FullScreenLoader />}\n      {\n        <CustomSnackBar\n          onClose={handleCloseSnackBar}\n          isOpen={snackBar.isOpen}\n          type={snackBar.type}\n          message={t(`${snackBar.message}`)}\n        />\n      }\n    </div>\n  );\n}\n\nexport default BoardManagementPage;\n"],"names":["createBoardCall","token","owner","title","fetch","API_BASE_URL","method","headers","Accept","Authorization","body","JSON","stringify","users","response","json","data","ok","Error","message","getAllBoardsCall","getBoardCall","boardId","deleteBoardCall","isOpen","onClose","type","toggleSnackBar","event","reason","Snackbar","className","styles","open","autoHideDuration","Alert","elevation","variant","severity","isDragging","Box","p","m","sx","bgcolor","yellow","cursor","id","_id","columnId","useSortable","attributes","listeners","setNodeRef","transform","transition","style","CSS","opacity","ref","items","useDroppable","accepts","map","task","item","close","columnNameRef","updateColumnTitle","t","useTranslation","useForm","defaultValues","columnName","current","register","handleSubmit","errors","formState","changeName","name","autoComplete","onSubmit","Tooltip","arrow","classes","tooltip","Input","autoFocus","fullWidth","disableUnderline","required","minLength","value","maxLength","IconButton","onClick","CheckOutlined","CloseOutlined","ConfirmationPopup","lazy","deleteColumn","useState","openConfirmationForm","setOpenConfirmationForm","handleClose","DeleteOutlineOutlined","fontSize","Dialog","maxWidth","DialogContent","Suspense","fallback","itemToDelete","onDelete","label","openEditForm","setOpenEditForm","useRef","order","Grid","xs","Paper","backgroundColor","grey","length","Button","size","color","ColumnAPI","create","update","delete","getAll","SENSOR_OPTIONS","distance","getColumnIndex","columns","findIndex","column","getTaskIndex","setColumns","setSnackBar","showLoader","setShowLoader","activeItem","setActiveItem","user","useAuth","sensors","useSensors","useSensor","PointerSensor","activationConstraint","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","keyboardCodes","start","end","cancel","dataColumn","console","log","prev","newState","filter","columnTitle","collisionDetection","closestCorners","onDragStart","active","activeColumn","find","toString","onDragOver","over","activeContainerID","overContainerID","overColumn","activeIndex","overIndex","indexOf","activeTaskItem","slice","onDragEnd","currentColumn","arrayMove","strategy","horizontalListSortingStrategy","TaskAPI","AddColumnForm","React","setOpen","useParams","loading","setLoading","snackBar","boardTitle","setBoardTitle","isLoading","setIsLoading","getBoard","useCallback","useEffect","addTasks","dataColumns","promises","Promise","all","then","taskData","newColumns","forEach","idx","sort","a","b","handlerSubmit","index","newColumn","mb","component","Link","to"],"sourceRoot":""}