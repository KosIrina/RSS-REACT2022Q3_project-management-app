{"version":3,"file":"static/js/25.b5eeb56d.chunk.js","mappings":"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","sources":["api/boards.ts","webpack://my-app/./src/components/common/customSnackbar/CustomSnackbar.module.scss?9fef","components/common/customSnackbar/CustomSnackbar.tsx","webpack://my-app/./src/components/common/fullScreenLoader/FullScreenLoader.module.scss?0494","components/common/fullScreenLoader/FullScreenLoader.tsx","webpack://my-app/./src/components/boardsListPage/boardCard/BoardCard.module.scss?a20c","components/boardsListPage/boardCard/BoardCard.tsx","webpack://my-app/./src/components/boardsListPage/boardsList/BoardsList.module.scss?e236","components/boardsListPage/boardsList/BoardsList.tsx","webpack://my-app/./src/pages/BoardsListPage.module.scss?9375","pages/BoardsListPage.tsx","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["import { API_BASE_URL } from './constants';\nimport { IResponseError, IBoard, TBoards } from './types';\n\nexport async function createBoardCall(\n  token: string,\n  owner: string,\n  title: string\n): Promise<IBoard> {\n  const response = await fetch(`${API_BASE_URL}/boards`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ title, owner, users: [] }),\n  });\n\n  const data: IBoard | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IBoard;\n}\n\nexport async function getAllBoardsCall(token: string): Promise<TBoards> {\n  const response = await fetch(`${API_BASE_URL}/boards`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: TBoards | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as TBoards;\n}\n\nexport async function getBoardCall(token: string, boardId: string): Promise<IBoard> {\n  const response = await fetch(`${API_BASE_URL}/boards/${boardId}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: IBoard | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IBoard;\n}\n\nexport async function deleteBoardCall(token: string, boardId: string): Promise<IBoard> {\n  const response = await fetch(`${API_BASE_URL}/boards/${boardId}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: IBoard | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IBoard;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"snackbar\":\"CustomSnackbar_snackbar__HogOa\",\"alert\":\"CustomSnackbar_alert__2Qolh\"};","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport Alert from '@mui/material/Alert';\nimport { ISnackBarProps } from './types';\nimport styles from './CustomSnackbar.module.scss';\n\nfunction CustomSnackBar({ isOpen, onClose, type, message }: ISnackBarProps) {\n  const toggleSnackBar = (event?: React.SyntheticEvent | Event, reason?: string): void => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    onClose();\n  };\n  return (\n    <Snackbar\n      className={styles.snackbar}\n      open={isOpen}\n      autoHideDuration={2000}\n      onClose={toggleSnackBar}\n    >\n      <Alert\n        elevation={6}\n        variant=\"filled\"\n        className={styles.alert}\n        onClose={toggleSnackBar}\n        severity={type}\n      >\n        {message}\n      </Alert>\n    </Snackbar>\n  );\n}\n\nexport default CustomSnackBar;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"FullScreenLoader_wrapper__ijAZ7\"};","import React from 'react';\nimport Loader from '../loader';\nimport styles from './FullScreenLoader.module.scss';\n\nfunction FullScreenLoader() {\n  return (\n    <div className={styles.wrapper}>\n      <Loader />\n    </div>\n  );\n}\n\nexport default FullScreenLoader;\n","// extracted by mini-css-extract-plugin\nexport default {\"board\":\"BoardCard_board__DBytZ\",\"link\":\"BoardCard_link__8578w\",\"paper\":\"BoardCard_paper__tFQTR\",\"title\":\"BoardCard_title__p+WSz\",\"owner\":\"BoardCard_owner__hM5mo\",\"deleteBtn\":\"BoardCard_deleteBtn__1cVJM\",\"dialogContent\":\"BoardCard_dialogContent__uqgdb\"};","import React, { useState, lazy, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport IconButton from '@mui/material/IconButton';\nimport Paper from '@mui/material/Paper';\nimport Delete from '@mui/icons-material/Delete';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport Loader from 'components/common/loader';\nimport { TSnackBarState } from 'components/common/customSnackbar/types';\nimport FullScreenLoader from 'components/common/fullScreenLoader';\nimport { deleteBoardCall } from 'api/boards';\nimport useAuth from 'auth/useAuth';\nimport styles from './BoardCard.module.scss';\n\nconst ConfirmationPopup = lazy(() => import('components/common/confirmationPopup'));\n\ninterface IBoardCardProps {\n  boardId: string;\n  title: string;\n  owner: string;\n  updateBoards: () => void;\n  updateSnackBar: ({ isOpen, type, message }: TSnackBarState) => void;\n}\n\nfunction BoardCard({ boardId, title, owner, updateBoards, updateSnackBar }: IBoardCardProps) {\n  const { user } = useAuth();\n  const { t } = useTranslation('boards-list-page');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isConfirmationPopupOpen, setConfirmationPopupOpen] = useState(false);\n\n  const deleteBoard = async (): Promise<void> => {\n    setIsLoading(true);\n    try {\n      await deleteBoardCall(user.token, boardId);\n      updateSnackBar({ type: 'success', isOpen: true, message: 'successDeletion' });\n      updateBoards();\n    } catch (error) {\n      if (error instanceof Error) {\n        updateSnackBar({\n          isOpen: true,\n          type: 'error',\n          message: 'unknownError',\n        });\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const openConfirmationPopup = () => {\n    setConfirmationPopupOpen(true);\n  };\n\n  const closeConfirmationPopup = () => {\n    setConfirmationPopupOpen(false);\n  };\n\n  return (\n    <>\n      <div className={styles.board}>\n        <Link className={styles.link} to={`/board-management/${boardId}`}>\n          <Paper className={styles.paper} elevation={4}>\n            <p className={styles.title}>{title}</p>\n            <p className={styles.owner}>\n              {t('owner')}: {owner}\n            </p>\n          </Paper>\n        </Link>\n        <IconButton className={styles.deleteBtn} onClick={openConfirmationPopup}>\n          <Delete />\n        </IconButton>\n      </div>\n\n      <Dialog\n        open={isConfirmationPopupOpen}\n        onClose={closeConfirmationPopup}\n        maxWidth=\"xs\"\n        fullWidth\n      >\n        <DialogContent className={styles.dialogContent}>\n          <Suspense fallback={<Loader />}>\n            <ConfirmationPopup\n              itemToDelete={t('deleteInfo', { columnName: title })}\n              onClose={closeConfirmationPopup}\n              onDelete={deleteBoard}\n            />\n          </Suspense>\n        </DialogContent>\n      </Dialog>\n      {isLoading && <FullScreenLoader />}\n    </>\n  );\n}\n\nexport default BoardCard;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"BoardsList_list__E0tGo\"};","import React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport BoardCard from '../boardCard';\nimport Loader from 'components/common/loader';\nimport CustomSnackBar from 'components/common/customSnackbar';\nimport { TSnackBarState } from 'components/common/customSnackbar/types';\nimport { getAllBoardsCall } from 'api/boards';\nimport { TBoards } from 'api/types';\nimport useAuth from 'auth/useAuth';\nimport { useTranslation } from 'react-i18next';\nimport { RootState } from 'store';\nimport { updateBoardsAfterCreation } from 'store/boardsSlice';\nimport styles from './BoardsList.module.scss';\n\nfunction BoardsList() {\n  const shouldBoardsUpdate = useSelector((state: RootState) => state.boards.shouldBoardsUpdate);\n  const dispatch = useDispatch();\n  const { t } = useTranslation('boards-list-page');\n  const { user } = useAuth();\n  const [boards, setBoards] = useState<TBoards>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [snackBar, setSnackBar] = useState<TSnackBarState>({\n    isOpen: false,\n    type: 'success',\n    message: '',\n  });\n\n  const getAllBoards = useCallback(async (): Promise<void> => {\n    setIsLoading(true);\n    setErrorMessage(null);\n    try {\n      const boards: TBoards = await getAllBoardsCall(user.token);\n      setBoards(boards);\n    } catch (error) {\n      if (error instanceof Error) {\n        setErrorMessage('unknownError');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user.token]);\n\n  useEffect(() => {\n    getAllBoards();\n    if (shouldBoardsUpdate) {\n      dispatch(updateBoardsAfterCreation(false));\n    }\n  }, [dispatch, getAllBoards, shouldBoardsUpdate]);\n\n  const updateBoards = () => {\n    getAllBoards();\n  };\n\n  const closeSnackBar = (): void => {\n    setSnackBar((prevState) => {\n      return { ...prevState, isOpen: false };\n    });\n  };\n\n  const updateSnackBar = ({ isOpen, type, message }: TSnackBarState) => {\n    setSnackBar({ isOpen, type, message });\n  };\n\n  return (\n    <>\n      <div className={styles.list}>\n        {isLoading && <Loader />}\n        {!!boards.length &&\n          !isLoading &&\n          !errorMessage &&\n          boards.map((board) => (\n            <BoardCard\n              key={board._id}\n              boardId={board._id}\n              title={board.title}\n              owner={board.owner}\n              updateBoards={updateBoards}\n              updateSnackBar={updateSnackBar}\n            />\n          ))}\n      </div>\n      {errorMessage && <p>{t(`${errorMessage}`)}</p>}\n      {!boards.length && !isLoading && !errorMessage && <p>{t('noBoards')}</p>}\n      <CustomSnackBar {...snackBar} onClose={closeSnackBar} message={t(`${snackBar.message}`)} />\n    </>\n  );\n}\n\nexport default BoardsList;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"BoardsListPage_wrapper__bqEef\"};","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport BoardsList from 'components/boardsListPage/boardsList';\n\nimport styles from './BoardsListPage.module.scss';\n\nfunction BoardsListPage() {\n  const { t } = useTranslation('boards-list-page');\n\n  return (\n    <div className=\"container\">\n      <div className={styles.wrapper}>\n        <h2>{t('title')}</h2>\n        <BoardsList />\n      </div>\n    </div>\n  );\n}\n\nexport default BoardsListPage;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;"],"names":["createBoardCall","token","owner","title","fetch","API_BASE_URL","method","headers","Accept","Authorization","body","JSON","stringify","users","response","json","data","ok","Error","message","getAllBoardsCall","getBoardCall","boardId","deleteBoardCall","isOpen","onClose","type","toggleSnackBar","event","reason","Snackbar","className","styles","open","autoHideDuration","Alert","elevation","variant","severity","ConfirmationPopup","lazy","updateBoards","updateSnackBar","user","useAuth","t","useTranslation","useState","isLoading","setIsLoading","isConfirmationPopupOpen","setConfirmationPopupOpen","deleteBoard","closeConfirmationPopup","to","Paper","IconButton","onClick","Delete","Dialog","maxWidth","fullWidth","DialogContent","Suspense","fallback","itemToDelete","columnName","onDelete","shouldBoardsUpdate","useSelector","state","boards","dispatch","useDispatch","setBoards","errorMessage","setErrorMessage","snackBar","setSnackBar","getAllBoards","useCallback","useEffect","updateBoardsAfterCreation","length","map","board","_id","prevState","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}