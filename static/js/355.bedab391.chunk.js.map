{"version":3,"file":"static/js/355.bedab391.chunk.js","mappings":"+OAGO,SAAeA,EAAgB,EAAD,oCAoBpC,8CApBM,WACLC,EACAC,EACAC,GAAa,8FAEUC,MAAM,GAAD,OAAIC,EAAAA,EAAY,WAAW,CACrDC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,mBACRC,cAAc,UAAD,OAAYR,IAE3BS,KAAMC,KAAKC,UAAU,CAAET,MAAAA,EAAOD,MAAAA,EAAOW,MAAO,OAC3C,KAAD,EARY,OAARC,EAAQ,gBAU8BA,EAASC,OAAO,KAAD,EAAxB,GAA7BC,EAA6B,OAE9BF,EAASG,GAAG,CAAD,qBAAQ,IAAIC,MAAOF,EAAwBG,SAAS,KAAD,2BAE5DH,GAAI,4CACZ,sBAEM,SAAeI,EAAiB,GAAD,+BAcrC,8CAdM,WAAgCnB,GAAa,8FAC3BG,MAAM,GAAD,OAAIC,EAAAA,EAAY,WAAW,CACrDC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAc,UAAD,OAAYR,MAE1B,KAAD,EANY,OAARa,EAAQ,gBAQ+BA,EAASC,OAAO,KAAD,EAAxB,GAA9BC,EAA8B,OAE/BF,EAASG,GAAG,CAAD,qBAAQ,IAAIC,MAAOF,EAAwBG,SAAS,KAAD,2BAE5DH,GAAI,4CACZ,sBAEM,SAAeK,EAAa,EAAD,kCAcjC,8CAdM,WAA4BpB,EAAeqB,GAAe,8FACxClB,MAAM,GAAD,OAAIC,EAAAA,EAAY,mBAAWiB,GAAW,CAChEhB,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAc,UAAD,OAAYR,MAE1B,KAAD,EANY,OAARa,EAAQ,gBAQ8BA,EAASC,OAAO,KAAD,EAAxB,GAA7BC,EAA6B,OAE9BF,EAASG,GAAG,CAAD,qBAAQ,IAAIC,MAAOF,EAAwBG,SAAS,KAAD,2BAE5DH,GAAI,4CACZ,sBAEM,SAAeO,EAAgB,EAAD,kCAcpC,8CAdM,WAA+BtB,EAAeqB,GAAe,8FAC3ClB,MAAM,GAAD,OAAIC,EAAAA,EAAY,mBAAWiB,GAAW,CAChEhB,OAAQ,SACRC,QAAS,CACPC,OAAQ,mBACRC,cAAc,UAAD,OAAYR,MAE1B,KAAD,EANY,OAARa,EAAQ,gBAQ8BA,EAASC,OAAO,KAAD,EAAxB,GAA7BC,EAA6B,OAE9BF,EAASG,GAAG,CAAD,qBAAQ,IAAIC,MAAOF,EAAwBG,SAAS,KAAD,2BAE5DH,GAAI,4CACZ,sB,0ICvE0C,SAG5BQ,EAAa,EAAD,qDAsB1B,OAtB0B,0BAA3B,WACEvB,EACAwB,EACAC,EACAC,EACAC,GAAgB,8FAEOxB,MAAM,GAAD,OAAIC,EAAAA,EAAY,kBAAUoB,GAAM,CAC1DnB,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,mBACRC,cAAc,UAAD,OAAYR,IAE3BS,KAAMC,KAAKC,UAAU,CAAEc,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,MACnC,KAAD,EARY,OAARd,EAAQ,gBAU6BA,EAASC,OAAO,KAAD,EAAxB,GAA5BC,EAA4B,OAE7BF,EAASG,GAAG,CAAD,qBAAQ,IAAIC,MAAOF,EAAwBG,SAAS,KAAD,2BAE5DH,GAAI,4CACZ,+BAEca,EAAe,EAAD,+CAc5B,OAd4B,0BAA7B,WAA8B5B,EAAewB,GAAU,8FAC9BrB,MAAM,GAAD,OAAIC,EAAAA,EAAY,kBAAUoB,GAAM,CAC1DnB,OAAQ,SACRC,QAAS,CACPC,OAAQ,mBACRC,cAAc,UAAD,OAAYR,MAE1B,KAAD,EANY,OAARa,EAAQ,gBAQ6BA,EAASC,OAAO,KAAD,EAAxB,GAA5BC,EAA4B,OAE7BF,EAASG,GAAG,CAAD,qBAAQ,IAAIC,MAAOF,EAAwBG,SAAS,KAAD,2BAE5DH,GAAI,4CACZ,+BAEcc,EAAY,EAAD,+CAczB,OAdyB,0BAA1B,WAA2B7B,EAAewB,GAAU,8FAC3BrB,MAAM,GAAD,OAAIC,EAAAA,EAAY,kBAAUoB,GAAM,CAC1DnB,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAc,UAAD,OAAYR,MAE1B,KAAD,EANY,OAARa,EAAQ,gBAQ6BA,EAASC,OAAO,KAAD,EAAxB,GAA5BC,EAA4B,OAE7BF,EAASG,GAAG,CAAD,qBAAQ,IAAIC,MAAOF,EAAwBG,SAAS,KAAD,2BAE5DH,GAAI,4CACZ,sB,6ECxDD,EAA0B,kC,SCW1B,MARA,WACE,OACE,gBAAKe,UAAWC,EAAe,UAC7B,SAAC,IAAM,KAGb,C,8NCTA,EAA6B,iCAA7B,EAAwE,8BAAxE,EAAkH,gCAAlH,EAAiK,mC,SCyGjK,MAnFA,SAAsB,GAAkD,IAAD,EAA/CC,EAAO,EAAPA,QAASC,EAAc,EAAdA,eACzBC,GAAWC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,KAATD,KACAE,GAAMC,EAAAA,EAAAA,GAAe,eAArBD,EACR,GAIIE,EAAAA,EAAAA,MAHFC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACaC,EAAM,EAAnBC,UAAaD,OAEf,GAAkCE,EAAAA,EAAAA,WAAkB,GAAM,eAAnDC,EAAS,KAAEC,EAAY,KAExBC,EAAW,yCAAG,WAAO9C,GAAa,8EACnB,OAAnB6C,GAAa,GAAM,mBAEalB,EAAAA,EAAAA,IAAYO,EAAKpC,MAAOoC,EAAKZ,IAAI,KAAD,EAAlD,OAAkD,SAAhDvB,EAAK,EAAXwB,KAAI,UACN1B,EAAAA,EAAAA,GAAgBqC,EAAKpC,MAAOC,EAAOC,GAAO,KAAD,EAC/C+B,EAAe,CAAEgB,KAAM,UAAWC,QAAQ,EAAMhC,QAAS,uBACzDgB,GAASiB,EAAAA,EAAAA,KAA0B,IAAO,kDAEtC,gBAAiBlC,OACnBgB,EAAe,CACbiB,QAAQ,EACRD,KAAM,QACN/B,QAAS,iBAEZ,QAGS,OAHT,UAED6B,GAAa,GACbf,IAAU,6EAEb,gBAnBgB,sCAyBjB,OACE,iCACE,kBAAMoB,SAAUV,GANyB,SAAH,GAAwB,IAAlBW,EAAU,EAAVA,WAC9CL,EAAYK,EACd,IAI4CC,YAAU,aAChD,SAACC,EAAA,GAAS,QACRzB,UAAWC,EACXP,GAAG,cACHyB,KAAK,OACLO,WAA6B,QAAjB,EAAAb,EAAOU,kBAAU,OAAjB,EAAmBnC,QAAUoB,EAAE,GAAD,OAAIK,EAAOU,WAAWnC,UAAa,IAC7EuC,QAASd,EAAOU,WAChBK,SAAO,EACPC,aAAa,MACbC,WAAS,EACTC,OAAO,QACPC,MAAOxB,EAAE,oBACTyB,WAAS,EACTC,QAAQ,YACJvB,EAAS,aAAc,CACzBwB,SAAU,gBACVC,UAAW,CACTC,MAAO,EACPjD,QAAS,eAEXkD,UAAW,CACTD,MAAO,GACPjD,QAAS,oBAIf,iBAAKY,UAAWC,EAAe,WAC7B,SAACsC,EAAA,EAAM,CACLvC,UAAWC,EACXkB,KAAK,SACLe,QAAQ,YACRM,WAAY3B,EAAOU,WAAW,SAE7Bf,EAAE,gBAEL,SAAC+B,EAAA,EAAM,CAACvC,UAAWC,EAAqBiC,QAAQ,WAAWO,QAASvC,EAAQ,SACzEM,EAAE,wBAIRQ,IAAa,SAAC,IAAgB,MAGrC,C","sources":["api/boards.ts","api/user.ts","webpack://my-app/./src/components/common/fullScreenLoader/FullScreenLoader.module.scss?0494","components/common/fullScreenLoader/FullScreenLoader.tsx","webpack://my-app/./src/components/common/header/navigation/AddBoardForm/AddBoardForm.module.scss?b667","components/common/header/navigation/AddBoardForm/AddBoardForm.tsx"],"sourcesContent":["import { API_BASE_URL } from './constants';\nimport { IResponseError, IBoard, TBoards } from './types';\n\nexport async function createBoardCall(\n  token: string,\n  owner: string,\n  title: string\n): Promise<IBoard> {\n  const response = await fetch(`${API_BASE_URL}/boards`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ title, owner, users: [] }),\n  });\n\n  const data: IBoard | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IBoard;\n}\n\nexport async function getAllBoardsCall(token: string): Promise<TBoards> {\n  const response = await fetch(`${API_BASE_URL}/boards`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: TBoards | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as TBoards;\n}\n\nexport async function getBoardCall(token: string, boardId: string): Promise<IBoard> {\n  const response = await fetch(`${API_BASE_URL}/boards/${boardId}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: IBoard | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IBoard;\n}\n\nexport async function deleteBoardCall(token: string, boardId: string): Promise<IBoard> {\n  const response = await fetch(`${API_BASE_URL}/boards/${boardId}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: IBoard | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IBoard;\n}\n","import { API_BASE_URL } from './constants';\nimport { IUser, IResponseError } from './types';\n\nasync function editUserCall(\n  token: string,\n  id: string,\n  name: string,\n  login: string,\n  password: string\n): Promise<IUser> {\n  const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ name, login, password }),\n  });\n\n  const data: IUser | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IUser;\n}\n\nasync function deleteUserCall(token: string, id: string): Promise<IUser> {\n  const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: IUser | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IUser;\n}\n\nasync function getUserCall(token: string, id: string): Promise<IUser> {\n  const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const data: IUser | IResponseError = await response.json();\n\n  if (!response.ok) throw new Error((data as IResponseError).message);\n\n  return data as IUser;\n}\n\nexport { editUserCall, deleteUserCall, getUserCall };\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"FullScreenLoader_wrapper__ijAZ7\"};","import React from 'react';\nimport Loader from '../loader';\nimport styles from './FullScreenLoader.module.scss';\n\nfunction FullScreenLoader() {\n  return (\n    <div className={styles.wrapper}>\n      <Loader />\n    </div>\n  );\n}\n\nexport default FullScreenLoader;\n","// extracted by mini-css-extract-plugin\nexport default {\"titleInput\":\"AddBoardForm_titleInput__h6ghn\",\"buttons\":\"AddBoardForm_buttons__nVLLN\",\"addButton\":\"AddBoardForm_addButton__kzM75\",\"cancelButton\":\"AddBoardForm_cancelButton__y6Xxx\"};","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport FullScreenLoader from 'components/common/fullScreenLoader';\nimport { TSnackBarState } from 'components/common/customSnackbar/types';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { getUserCall } from 'api/user';\nimport { createBoardCall } from 'api/boards';\nimport useAuth from 'auth/useAuth';\nimport { updateBoardsAfterCreation } from 'store/boardsSlice';\nimport styles from './AddBoardForm.module.scss';\n\ninterface IAddBoardFormProps {\n  onClose: () => void;\n  updateSnackBar: ({ isOpen, type, message }: TSnackBarState) => void;\n}\n\ninterface IFormValues {\n  boardTitle: string;\n}\n\nfunction AddBoardForm({ onClose, updateSnackBar }: IAddBoardFormProps) {\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n  const { t } = useTranslation('modal-forms');\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<IFormValues>();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const createBoard = async (title: string): Promise<void> => {\n    setIsLoading(true);\n    try {\n      const { name: owner } = await getUserCall(user.token, user.id);\n      await createBoardCall(user.token, owner, title);\n      updateSnackBar({ type: 'success', isOpen: true, message: 'successfulCreation' });\n      dispatch(updateBoardsAfterCreation(true));\n    } catch (error) {\n      if (error instanceof Error) {\n        updateSnackBar({\n          isOpen: true,\n          type: 'error',\n          message: 'unknownError',\n        });\n      }\n    } finally {\n      setIsLoading(false);\n      onClose();\n    }\n  };\n\n  const onSubmit: SubmitHandler<IFormValues> = ({ boardTitle }) => {\n    createBoard(boardTitle);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSubmit)} noValidate>\n        <TextField\n          className={styles.titleInput}\n          id=\"board-title\"\n          type=\"text\"\n          helperText={errors.boardTitle?.message ? t(`${errors.boardTitle.message}`) : ' '}\n          error={!!errors.boardTitle}\n          focused\n          autoComplete=\"off\"\n          autoFocus\n          margin=\"dense\"\n          label={t('createBoardLabel')}\n          fullWidth\n          variant=\"outlined\"\n          {...register('boardTitle', {\n            required: 'fieldRequired' || '',\n            minLength: {\n              value: 2,\n              message: 'fieldLength' || '',\n            },\n            maxLength: {\n              value: 50,\n              message: 'fieldLength' || '',\n            },\n          })}\n        />\n        <div className={styles.buttons}>\n          <Button\n            className={styles.addButton}\n            type=\"submit\"\n            variant=\"contained\"\n            disabled={!!errors.boardTitle}\n          >\n            {t('addButton')}\n          </Button>\n          <Button className={styles.cancelButton} variant=\"outlined\" onClick={onClose}>\n            {t('cancelButton')}\n          </Button>\n        </div>\n      </form>\n      {isLoading && <FullScreenLoader />}\n    </>\n  );\n}\n\nexport default AddBoardForm;\n"],"names":["createBoardCall","token","owner","title","fetch","API_BASE_URL","method","headers","Accept","Authorization","body","JSON","stringify","users","response","json","data","ok","Error","message","getAllBoardsCall","getBoardCall","boardId","deleteBoardCall","editUserCall","id","name","login","password","deleteUserCall","getUserCall","className","styles","onClose","updateSnackBar","dispatch","useDispatch","user","useAuth","t","useTranslation","useForm","register","handleSubmit","errors","formState","useState","isLoading","setIsLoading","createBoard","type","isOpen","updateBoardsAfterCreation","onSubmit","boardTitle","noValidate","TextField","helperText","error","focused","autoComplete","autoFocus","margin","label","fullWidth","variant","required","minLength","value","maxLength","Button","disabled","onClick"],"sourceRoot":""}